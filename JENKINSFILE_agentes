pipeline {
    agent none // Control centralizado

    stages {
       
        stage('Clone Repo') {
            agent { label 'main' }
            steps {
                git 'https://github.com/Felipe-Hernandez-dev/helloworld'
                stash name: 'source', includes: '**/*'
            }
        }

        stage('Run Tests') {
            parallel {               
                stage('Functional + Security') {
                    agent { label 'Linux-agent1' }
                    steps {
                        unstash 'source' 
                        sh 'pip install -r requirements.txt'                         
                        script {
                            env.FLASK_PID = sh(script: 'nohup flask run & echo $!', returnStdout: true).trim()
                            env.WIREMOCK_PID = sh(script: 'nohup java -jar wiremock-standalone-3.13.0.jar --port 9090 & echo $!', returnStdout: true).trim()
                            sleep 10 
                        }                        
                        sh 'pytest --junitxml=rest-results.xml test/unit'                        
                        sh 'bandit -r . -f json -o bandit.json || true'                        
                        sh "kill -9 ${env.FLASK_PID} ${env.WIREMOCK_PID} || true"
                    }
                    post {
                        always {
                            junit 'rest-results.xml'
                            archiveArtifacts artifacts: 'bandit.json', allowEmptyArchive: true
                            cleanWs()
                        }
                    }
                }                
                stage('Static + Coverage') {
                    agent { label 'Linux-agent2' }
                    steps {
                        unstash 'source'
                        sh 'pip install -r requirements.txt'                      
                        sh 'flake8 --format=pylint app > flake8.out'                        
                        sh 'coverage run --source=app -m pytest test/unit'
                        sh 'coverage xml'
                        stash name: 'reports', includes: 'flake8.out,coverage.xml'
                    }
                    post {
                        always {
                            cleanWs()
                        }
                    }
                }
            }
        }

        
        stage('Reports') {
            agent { label 'main' }
            steps {               
                unstash 'reports'                
                recordIssues(
                    tools: [flake8(pattern: 'flake8.out'), pyLint(pattern: 'bandit.json')],
                    qualityGates: [
                        [threshold: 8, type: 'TOTAL', unstable: true],
                        [threshold: 10, type: 'TOTAL', unstable: false]
                    ]
                )
                recordCoverage(
                    tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']],
                    qualityGates: [
                        [threshold: 85.0, metric: 'LINE', criticality: 'FAILURE']
                    ]
                )
            }
            post {
                always {
                    cleanWs() 
                }
            }
        }
    }
}